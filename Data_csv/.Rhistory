for(i in 2:18){
data_stained = get(List_treat_stained[[i]])
syto_stained[,i+1] = data_stained
}
names(syto_stained) = c("time", List_treat_stained)
#création du data.frame UNstained
syto_unstained = data.frame(time, MixCPV_unstained1)
for(i in 2:18){
data_unstained = get(List_treat_unstained[[i]])
syto_unstained[,i+1] = data_unstained
}
names(syto_unstained) = c("time", List_treat_unstained)
#créer un vecteur contenant les noms des puits d'intérêt stained
let = rep(c(rep("A", times = 3),rep("C", times = 3),rep("E", times = 3)),times = 2)
chi = c(rep(c(1,2,3), times = 3), rep(c(5,6,7),times= 3))
lech = c()
for(i in 1:18){
lech[i] = paste(let[i], chi[i], sep = "")
}
#créer un vecteur contenant les noms des puits d'intérêt UNstained
chi_un = c(rep(c(7,8,9), times = 3), rep(c(10,11,12),times= 3))
lech_un = c()
for(i in 1:18){
lech_un[i] = paste(let[i], chi_un[i], sep = "")
}
#remplir avec SYTO 9 pour tous les traitements stained
for(i in 1:9){
for(j in 1:18){
Data = get(List[[i]]) #stocke T[I]
print(lech[j])
syto_stained[i,j+1] = mean(Data$SYTO.9.Abs..Count[Data$Well.ID== lech[j]][1:2])
#parcours syto 2 en ligne, prend les comptes absolu syto9 de T[i] qui ont le nom lech[j] (deux replicat tech) et fait une moyenne
}}
#remplir avec SYTO 9 pour tous les traitements stained
for(i in 1:9){
for(j in 1:18){
Data = get(List[[i]]) #stocke T[I]
print(lech_un[j])
syto_unstained[i,j+1] = mean(Data$SYTO.9.Abs..Count[Data$Well.ID== lech_un[j]][1:2])
#parcours syto 2 en ligne, prend les comptes absolu syto9 de T[i] qui ont le nom lech[j] (deux replicat tech) et fait une moyenne
}}
#graphiques SYTO-9
par(mfrow = c(3,3))
for(i in 2:10){
plot(syto_stained[,1],syto_stained[,i], log = "y", ylim = range(syto_stained[,c(2:15,17:19)]) ,main = List_treat_stained[[i-1]], xlab = "time[h]", ylab = "SYTO-9 count")
}
for(i in 11:19){
plot(syto_stained[,1],syto_stained[,i], log = "y",ylim = range(syto_stained[,c(2:15,17:19)]),main = List_treat_stained[[i-1]],xlab = "time[h]", ylab = "SYTO-9 count")
}
#-------------------------------mCHE_stained
cher_stained = data.frame(time, List_treat_stained)
for(i in 1:18){
data = get(List_treat_stained[[i]])
cher_stained[,i+1] = data
}
names(cher_stained) = c("time", List_treat_stained)
#remplir le Data frame
for(i in 1:9){
for(j in 1:18){
Data = get(List[[i]])
print(lech[j])
cher_stained[i,j+1] = mean(Data$mChe.SYTO.9.Abs..Count[Data$Well.ID == lech[j]][1:2])
}}
#graphiques
par(mfrow = c(3,3))
for(i in 2:10){
plot(cher_stained[,1],cher_stained[,i], log = "y", ylim = range(cher_stained[2:19]),main = List_treat_stained[[i-1]], xlab = "time[h]", ylab = "mChe count")
}
for(i in 11:19){
plot(cher_stained[,1],cher_stained[,i], log = "y",ylim = range(cher_stained[2:19]), main = List_treat_stained[[i-1]],xlab = "time[h]", ylab = "mChe count")
}
#-------------------------------mCHE_UNstained
cher_unstained = data.frame(time, List_treat_unstained)
for(i in 1:18){
data = get(List_treat_unstained[[i]])
cher_unstained[,i+1] = data
}
names(cher_unstained) = c("time", List_treat_unstained)
#remplir le Data frame
for(i in 1:9){
for(j in 1:18){
Data = get(List[[i]])
print(lech_un[j])
cher_unstained[i,j+1] = mean(Data$mChe.SYTO.9.Abs..Count[Data$Well.ID == lech_un[j]][1:2])
}}
#graphiques
par(mfrow = c(3,3))
for(i in 2:10){
plot(cher_unstained[,1],cher_unstained[,i], log = "y",ylim = range(cher_unstained[,2:19]), main = List_treat_unstained[[i-1]], xlab = "time[h]", ylab = "mChe count")
}
for(i in 11:19){
plot(cher_unstained[,1],cher_unstained[,i], log = "y",ylim = range(cher_unstained[,2:19]), main = List_treat_unstained[[i-1]],xlab = "time[h]", ylab = "mChe count")
}
### ------------------------------------------------ALL- ABSOLUT COUNT STAINED
#créer le data frame pour acceuillir les données
absol_stained = data.frame(time, List_treat_stained)
for(i in 1:18){
data = get(List_treat_stained[[i]])
absol_stained[,i+1] = data
}
names(absol_stained) = c("time", List_treat_stained)
#remplir
for(i in 1:9){
for(j in 1:18){
Data = get(List[[i]])
print(lech[j])
absol_stained[i,j+1] = mean(Data$SYTO.9.Abs..Count[Data$Well.ID == lech[j]][1:2]) + mean(Data$mChe.SYTO.9.Abs..Count[Data$Well.ID == lech[j]][1:2])
}}
#graphiques
par(mfrow = c(3,3))
for(i in 2:10){
plot(absol_stained[,1],absol_stained[,i], ylim = range(absol_stained[,2:19]), log = "y", main = List_treat_stained[[i-1]], xlab = "time[h]", ylab = "Absolut count")
}
for(i in 11:19){
plot(absol_stained[,1],absol_stained[,i],  ylim = range(absol_stained[,2:19]),log = "y", main = List_treat_stained[[i-1]],xlab = "time[h]", ylab = "Absolut count")
}
### ------------------------------------------------ALL- ABSOLUT COUNT UNSTAINED
#créer le data frame pour acceuillir les données
absol_unstained = data.frame(time, List_treat_unstained)
for(i in 1:18){
data = get(List_treat_unstained[[i]])
absol_unstained[,i+1] = data
}
names(absol_unstained) = c("time", List_treat_unstained)
#remplir
for(i in 1:9){
for(j in 1:18){
Data = get(List[[i]])
print(lech[j])
absol_unstained[i,j+1] = mean(Data$All.Abs..Count[Data$Well.ID == lech[j]][1:2])
}}
#graphiques
par(mfrow = c(3,3))
for(i in 2:10){
plot(absol_unstained[,1],absol_unstained[,i], ylim = range(absol_unstained[,2:19]), log = "y", main = List_treat_unstained[[i-1]], xlab = "time[h]", ylab = "Absolut count")
}
for(i in 11:19){
plot(absol_unstained[,1],absol_unstained[,i],  ylim = range(absol_unstained[,2:19]),log = "y", main = List_treat_unstained[[i-1]],xlab = "time[h]", ylab = "Absolut count")
}
#cell count
list_cell_count = vector(mode = "list", length = 32)
list_cell_count[1] = "time"
CvTol = rep(c("MixC", "Tol"), each = 16)
bac = rep(rep(c("SC", "PV", "PVSC_SC","PVSC_PV"), each = 4), time = 2)
n = rep(c(1,2,3,"mean"), times = 8)
for(i in 1:32){
list_cell_count[i+1] = paste(CvTol[i], paste(bac[i], n[i], sep = ""), sep = "_")
}
## moyennes
for(i in seq(from = 5, to = length(list_cell_count), by = 4)){
print(i)
print(list_cell_count[i])
assign(list_cell_count[[i]], rep(NA, times = 9))
}
cell_count = data.frame(time, syto_stained$MixCSC_stained1, syto_stained$MixCSC_stained2, syto_stained$MixCSC_stained3, get(list_cell_count[[5]])
,cher_stained$MixCPV_stained1,cher_stained$MixCPV_stained2,cher_stained$MixCPV_stained3, get(list_cell_count[[9]])
,syto_stained$MixCPVSC_stained1,syto_stained$MixCPVSC_stained2,syto_stained$MixCPVSC_stained3,get(list_cell_count[[13]])
,cher_stained$MixCPVSC_stained1, cher_stained$MixCPVSC_stained2, cher_stained$MixCPVSC_stained3, get(list_cell_count[[17]])
,syto_stained$ToluSC_stained1,syto_stained$ToluSC_stained2,syto_stained$ToluSC_stained3,get(list_cell_count[[21]])
,cher_stained$ToluPV_stained1,cher_stained$ToluPV_stained2,cher_stained$ToluPV_stained3, get(list_cell_count[[25]])
,syto_stained$ToluPVSC_stained1, syto_stained$ToluPVSC_stained2,syto_stained$ToluPVSC_stained3, get(list_cell_count[[29]])
,cher_stained$ToluPVSC_stained1,cher_stained$ToluPVSC_stained2,cher_stained$ToluPVSC_stained3, get(list_cell_count[[33]]))
names(cell_count) = list_cell_count
names(cell_count)
##remplir les moyennes
for(i in 1:9){cell_count[i,5] = sum(c(syto_stained$MixCSC_stained1[i], syto_stained$MixCSC_stained2[i], syto_stained$MixCSC_stained3[i]))/3}
for(i in 1:9){cell_count[i,9] =mean(c(cher_stained$MixCPV_stained1[i],cher_stained$MixCPV_stained2[i],cher_stained$MixCPV_stained3[i]))}
for(i in 1:9){cell_count[i,13] =mean(c(syto_stained$MixCPVSC_stained1[i],syto_stained$MixCPVSC_stained2[i],syto_stained$MixCPVSC_stained3[i]))}
for(i in 1:9){cell_count[i,17] =mean(c(cher_stained$MixCPVSC_stained1[i], cher_stained$MixCPVSC_stained2[i], cher_stained$MixCPVSC_stained3[i]))}
for(i in 1:9){cell_count[i,21] =mean(c(syto_stained$ToluSC_stained1[i],syto_stained$ToluSC_stained2[i],syto_stained$ToluSC_stained3[i]))}
for(i in 1:9){cell_count[i,25] =mean(c(cher_stained$ToluPV_stained1[i],cher_stained$ToluPV_stained2[i],cher_stained$ToluPV_stained3[i]))}
for(i in 1:9){cell_count[i,29] =mean(c(syto_stained$ToluPVSC_stained1[i], syto_stained$ToluPVSC_stained2[i],syto_stained$ToluPVSC_stained3[i]))}
for(i in 1:9){cell_count[i,33] =mean(c(cher_stained$ToluPVSC_stained1[i],cher_stained$ToluPVSC_stained2[i],cher_stained$ToluPVSC_stained3[i]))}
## graphiques finaux, copié collé W1
#graphiques
par(mfrow = c(1,1))
totsc <- data.frame(time, MixC_SCmoy, Tol_SCmoy, MixC_PPSC_SCmoy, Tol_PPSC_SCmoy)
#ppmortes dans ppseul
Tol_deadPVmoy<- c()
for(i in 1:9){
Tol_deadPVmoy[i] <- sum(syto_stained$ToluPV_stained1[time==time[i]],
syto_stained$ToluPV_stained2[time==time[i]],
syto_stained$ToluPV_stained3[time==time[i]])/3
}
#total dans ppseul
Tol_all_in_pv = c()
for(i in 1:9){
Tol_all_in_pv[i]  <- Tol_deadPVmoy[i] + cell_count$Tol_PVmean[i]
}
#Plot des comptes de SC
plot(cell_count$time, cell_count$MixC_SCmean,lwd=1.3,log = "y",xlim=c(0,48), ylim = c(min(Tol_deadPVmoy), max(Tol_all_in_pv)), type = "o",main="SC growth",xlab= "Time [Hours]", ylab="log(SC count)")
points(cell_count$time,cell_count$Tol_SCmean,type="o", col="red",lwd=1.3)
points(cell_count$time,cell_count$MixC_PVSC_SCmean, type="o", col="blue",lwd=1.3)
points(cell_count$time, cell_count$Tol_PVSC_SCmean, type = "o", col = "orange",lwd=1.3)
points(cell_count$time, Tol_deadPVmoy, type = "o", col = "green",lwd=1.3)
points(cell_count$time, cell_count$MixC_PVSC_PVmean+cell_count$MixC_PVSC_SCmean,type = "o", col = "brown",lwd=1.3)
points(cell_count$time, cell_count$Tol_PVSC_PVmean+ cell_count$Tol_PVSC_SCmean,type = "o", col = "grey" ,lwd=1.3)
points(cell_count$time, Tol_all_in_pv, type = "o", col = "pink" ,lwd=1.5)
legend("topleft",legend=c("SC in mixC","SC in Tol","SC in PV+SC in mixC","SC in PV+SC in Tol", "Syto-9 count in Tol PValone"),fill=c("black","red","blue","orange", "green"))
legend("bottomright", legend=c("PVSC total in mixC","PVSC total in Tol","total count in pv alone"), fill=c("brown", "gray", "pink"))
#SAME WITH PV
#totPV <- data.frame(time, MixC_PVmoy, Tol_PVmoy, MixC_PVSC_PVmoy, Tol_PVSC_PVmoy)
plot(cell_count$time, cell_count$MixC_PVmean,log="y",lwd=1.3,xlim=c(0,48),ylim=c(min(Tol_deadPVmoy), max(cell_count$Tol_PVmean)), type="o",main="PV growth",xlab= "Time [Hours]", ylab="log(PV count)")
#Plot des comptes de PV
points(cell_count$time,cell_count$Tol_PVmean, type="o", col="red",lwd=1.3)
points(cell_count$time,cell_count$MixC_PVSC_PVmean, type="o", col="blue",lwd=1.3)
points(cell_count$time,cell_count$Tol_PVSC_PVmean, type="o", col="orange",lwd=1.3)
points(cell_count$time, cell_count$MixC_PVSC_SCmean + cell_count$MixC_PVSC_PVmean, type="o", col="brown",lwd=1.3)
points(cell_count$time, cell_count$Tol_PVSC_SCmean + cell_count$Tol_PVSC_PVmean, type="o", col="gray",lwd=1.3)
legend("bottomright",legend=c("PV in mixC","PV in Tol","PV in PV+SC in mixC","PV in PV+SC in Tol", "PVSC total in mixC", "PVSC total in Tol"),fill=c("black","red","blue","orange", "brown", "gray"))
View(cell_count)
View(cell_count)
ess2<- read.table("ess2.txt")
View(ess2)
View(ess2)
ess2<- read.table("ess2.txt", header=T)
ess2 <- read.table("ess2.txt", header = T)
rm(list=ls())
#charger les données, après avoir fait session, set working directory, to source file location
path = "Data_W1_csv2/T"
List = vector(mode = "list", length = 8) #sorte de liste qui peut contenir des variables
csv = c()
for(i in 1:8){
List[[i]]= paste("T" , i-1, sep = "")
csv[i] = paste(path,i-1,".csv", sep = "")
assign(paste("T" , i-1, sep = ""), read.csv(csv[i], header = T))
}
#echanger A5,6,7 avec E5,6,7 pour T1
x1 = T1[40:48,]
y1 = T1[64:72,]
T1[40:48,] = y1
T1[64:72,] = x1
T1$Well.ID[40:48] = rep(c("A5", "A6", "A7"),times = 3)
T1$Well.ID[64:72] = rep(c("E5", "E6", "E7"),times = 3)
#t0 % 10 et T1
T0$All.Abs..Count = T0$All.Abs..Count
T0$mChe.SYTO.9.Abs..Count = T0$mChe.SYTO.9.Abs..Count
T0$SYTO.9.Abs..Count = T0$SYTO.9.Abs..Count
T1$All.Abs..Count = T1$All.Abs..Count*10
T1$mChe.SYTO.9.Abs..Count = T1$mChe.SYTO.9.Abs..Count*10
T1$SYTO.9.Abs..Count = T1$SYTO.9.Abs..Count*10
#T2, 3, 4, 5, 6, 7, 8 dilution adjustment
T2$All.Abs..Count = T2$All.Abs..Count*100
T2$mChe.SYTO.9.Abs..Count = T2$mChe.SYTO.9.Abs..Count*100
T2$SYTO.9.Abs..Count = T3$SYTO.9.Abs..Count*100
T3$All.Abs..Count = T3$All.Abs..Count*100
T3$mChe.SYTO.9.Abs..Count = T3$mChe.SYTO.9.Abs..Count*100
T3$SYTO.9.Abs..Count = T3$SYTO.9.Abs..Count*100
T4$All.Abs..Count = T4$All.Abs..Count*100
T4$mChe.SYTO.9.Abs..Count = T4$mChe.SYTO.9.Abs..Count*100
T4$SYTO.9.Abs..Count = T4$SYTO.9.Abs..Count*100
T5$All.Abs..Count = T5$All.Abs..Count*100
T5$mChe.SYTO.9.Abs..Count = T5$mChe.SYTO.9.Abs..Count*100
T5$SYTO.9.Abs..Count = T5$SYTO.9.Abs..Count*100
T6$All.Abs..Count = T6$All.Abs..Count*100
T6$mChe.SYTO.9.Abs..Count = T6$mChe.SYTO.9.Abs..Count*100
T6$SYTO.9.Abs..Count = T6$SYTO.9.Abs..Count*100
T7$All.Abs..Count = T7$All.Abs..Count*100
T7$mChe.SYTO.9.Abs..Count = T7$mChe.SYTO.9.Abs..Count*100
T7$SYTO.9.Abs..Count = T7$SYTO.9.Abs..Count*100
#noms de traitements: Toluène vs mix C, SC vs PP vs PPSC, replicat
mil = rep(c("MixC","Tolu" ), each = 9)
tre = rep(rep(c("SC", "PP", "PPSC"), each = 3),times = 2)
n = rep(c(1,2,3), times= 6)
names = c()
for(i in 1:18){
names[i] = paste(mil[i], tre[i], n[i], sep = "")
}
#crer un data frame pour acceuilir les données dans le mauvais sens
for(i in 1:8){
assign(paste("t_", i-1, sep=""), rep(NA, times = 18))
}
syto = data.frame(names,t_0, t_1, t_2, t_3, t_4, t_5, t_6, t_7)
###------------------------------------------------------------------ SYTO-9
##créer un data frame pour acceuilir les données dans le bon sens
#créer une liste contenant les noms de traitement et leur assigner un vecteur 8xNA
List_treat = vector(mode = "list", length = 18)
for(i in 1:18){
List_treat[[i]] = names[i]
assign(List_treat[[i]], rep(NA, times = 8))
}
#vecteur contenant le temps en heure
time = c(0, 11, 15 + 1/6, 19.5,22.5,38.5 , 45+ 1/3 ,48 )
#creer le dataframe a proprement parler
syto2 = data.frame(time, MixCPP1)
for(i in 2:18){
data = get(List_treat[[i]])
syto2[,i+1] = data
}
names(syto2) = c("time", List_treat)
#créer un vecteur contenant les noms des puits d'intérêt
let = rep(c(rep("A", times = 3),rep("C", times = 3),rep("E", times = 3)),times = 2)
chi = c(rep(c(1,2,3), times = 3), rep(c(5,6,7),times= 3))
lech = c()
for(i in 1:18){
lech[i] = paste(let[i], chi[i], sep = "")
}
#remplir avec SYTO 9 pour tous les traitements
for(i in 1:8){
for(j in 1:18){
Data = get(List[[i]]) #stocke T[I]
print(lech[j])
syto2[i,j+1] = mean(Data$SYTO.9.Abs..Count[Data$Well.ID== lech[j]][1:2])
#parcours syto 2 en ligne, prend les comptes absolu syto9 de T[i] qui ont le nom lech[j] (deux replicat tech) et fait une moyenne
}}
#graphiques SYTO-9
par(mfrow = c(3,3))
for(i in 2:10){
plot(syto2[,1],syto2[,i], log = "y", ylim=c(min(syto2[,2:19]), max(syto2[,2:19])),main = List_treat[[i-1]], xlab = "time[h]", ylab = "SYTO-9 count")
}
for(i in 11:19){
plot(syto2[,1],syto2[,i], log = "y", ylim=c(min(syto2[,2:19]), max(syto2[,2:19])), main = List_treat[[i-1]],xlab = "time[h]", ylab = "SYTO-9 count")
}
###------------------------------------------------------------------m-che
#creer data frame pour acceuilir les données
cher = data.frame(time, List_treat)
for(i in 1:18){
data = get(List_treat[[i]])
cher[,i+1] = data
}
names(cher) = c("time", List_treat)
#remplir le Data frame
for(i in 1:8){
for(j in 1:18){
Data = get(List[[i]])
print(lech[j])
cher[i,j+1] = mean(Data$mChe.SYTO.9.Abs..Count[Data$Well.ID == lech[j]][1:2])
}}
#graphiques
par(mfrow = c(3,3))
for(i in 2:10){
plot(cher[,1],cher[,i],ylim=c(min(cher[,2:19]), max(cher[,2:19])), main = List_treat[[i-1]], xlab = "time[h]", ylab = "mChe count")
}
for(i in 11:19){
plot(cher[,1],cher[,i], ylim=c(min(cher[,2:19]), max(cher[,2:19])),main = List_treat[[i-1]],xlab = "time[h]", ylab = "mChe count")
}
### ------------------------------------------------ALL- ABSOLUT COUNT
#créer le data frame pour acceuillir les données
absol = data.frame(time, List_treat)
for(i in 1:18){
data = get(List_treat[[i]])
absol[,i+1] = data
}
names(absol) = c("time", List_treat)
#remplir
for(i in 1:8){
for(j in 1:18){
Data = get(List[[i]])
print(lech[j])
absol[i,j+1] = mean(Data$mChe.SYTO.9.Abs..Count[Data$Well.ID == lech[j]][1:2] + Data$SYTO.9.Abs..Count[Data$Well.ID== lech[j]][1:2])
}}
#graphiques
par(mfrow = c(3,3))
for(i in 2:10){
plot(absol[,1],absol[,i], ylim = c(min(absol[,2:19]), max(absol[,2:19])), log = "y", main = List_treat[[i-1]], xlab = "time[h]", ylab = "Absolut count")
}
for(i in 11:19){
plot(absol[,1],absol[,i],  ylim = c(min(absol[,2:19]), max(absol[,2:19])),log = "y", main = List_treat[[i-1]],xlab = "time[h]", ylab = "Absolut count")
}
#means sc
MixC_SCmoy<- c()
for(i in 1:8){
MixC_SCmoy[i] <- sum(syto2$MixCSC1[time==time[i]],  syto2$MixCSC2[time==time[i]], syto2$MixCSC3[time==time[i]])/3
}
Tol_SCmoy<- c()
for(i in 1:8){
Tol_SCmoy[i] <- sum(syto2$ToluSC1[time==time[i]],  syto2$ToluSC2[time==time[i]], syto2$ToluSC3[time==time[i]])/3
}
Tol_PPSC_SCmoy <-c()
for(i in 1:8){
Tol_PPSC_SCmoy[i] <- sum(syto2$ToluPPSC1[time==time[i]],  syto2$ToluPPSC2[time==time[i]], syto2$ToluPPSC3[time==time[i]])/3
}
MixC_PPSC_SCmoy <-c()
for(i in 1:8){
MixC_PPSC_SCmoy[i] <- sum(syto2$MixCPPSC1[time==time[i]],  syto2$MixCPPSC2[time==time[i]], syto2$MixCPPSC3[time==time[i]])/3
}
# means PP
MixC_PPmoy<- c()
for(i in 1:8){
MixC_PPmoy[i] <- sum(cher$MixCPP1[time==time[i]],  cher$MixCPP2[time==time[i]],cher$MixCPP3[time==time[i]])/3
}
Tol_PPmoy <- c()
for(i in 1:8){
Tol_PPmoy[i] <- sum(cher$ToluPP1[time==time[i]],  cher$ToluPP2[time==time[i]],cher$ToluPP3[time==time[i]])/3
}
Tol_PPSC_PPmoy <- c()
for(i in 1:8){
Tol_PPSC_PPmoy[i] <- sum(cher$ToluPPSC1[time==time[i]],  cher$ToluPPSC2[time==time[i]],cher$ToluPP3[time==time[i]])/3
}
MixC_PPSC_PPmoy <- c()
for(i in 1:8){
MixC_PPSC_PPmoy[i] <- sum(cher$MixCPPSC1[time==time[i]],  cher$MixCPPSC2[time==time[i]],cher$MixCPP3[time==time[i]])/3
}
#cell count
list_cell_count = vector(mode = "list", length = 33)
list_cell_count[1] = "time"
CvTol = rep(c("MixC", "Tol"), each = 16)
bac = rep(rep(c("SC", "PP", "PPSC_SC","PPSC_PP"), each = 4), time = 2)
n = rep(c(1,2,3,"moy"), times = 8)
for(i in 1:32){
list_cell_count[i+1] = paste(CvTol[i], paste(bac[i], n[i], sep = ""), sep = "_")
}
cell_count = data.frame(time, syto2$MixCSC1, syto2$MixCSC2, syto2$MixCSC3,MixC_SCmoy,
cher$MixCPP1,cher$MixCPP2,cher$MixCPP3,MixC_PPmoy,
syto2$MixCPPSC1,syto2$MixCPPSC2,syto2$MixCPPSC3,MixC_PPSC_SCmoy,
cher$MixCPPSC1, cher$MixCPPSC2, cher$MixCPPSC3,Tol_PPSC_SCmoy,
syto2$ToluSC1,syto2$ToluSC2,syto2$ToluSC3, Tol_SCmoy,
cher$ToluPP1,cher$ToluPP2,cher$ToluPP3, Tol_PPmoy,
syto2$ToluPPSC1, syto2$ToluPPSC2,syto2$ToluPPSC3,Tol_PPSC_SCmoy,
cher$ToluPPSC1,cher$ToluPPSC2,cher$ToluPPSC3, Tol_PPSC_PPmoy)
names(cell_count) = list_cell_count
names(cell_count)
MixC_PPSC1 <- cell_count$MixC_PPSC_SC1 + cell_count$MixC_PPSC_PP1
MixC_PPSC2 <- cell_count$MixC_PPSC_SC2 + cell_count$MixC_PPSC_PP2
MixC_PPSC3 <- cell_count$MixC_PPSC_SC3 + cell_count$MixC_PPSC_PP3
MixC_PPSCmoy <- (MixC_PPSC1+ MixC_PPSC2+ MixC_PPSC3)/3
Tol_PPSC1 <- cell_count$Tol_PPSC_SC1 + cell_count$Tol_PPSC_PP1
Tol_PPSC2 <- cell_count$Tol_PPSC_SC2 + cell_count$Tol_PPSC_PP2
Tol_PPSC3 <- cell_count$Tol_PPSC_SC3 + cell_count$Tol_PPSC_PP3
Tol_PPSCmoy <- (Tol_PPSC1+ Tol_PPSC2+ Tol_PPSC3)/3
cell_count <- cbind(cell_count, MixC_PPSC1, MixC_PPSC2,MixC_PPSC3, MixC_PPSCmoy, Tol_PPSC1, Tol_PPSC2, Tol_PPSC3, Tol_PPSCmoy)
#puissance stat
SC_t6_mixC_syto9 = c(syto2$MixCSC1[syto2$time == 43],syto2$MixCSC2[syto2$time == 43],syto2$MixCSC3[syto2$time == 43] )
PP_t6_mixC_mChe = c(cher$ToluPP1[cher$time == 43],cher$ToluPP2[cher$time == 43],cher$ToluPP3[cher$time == 43] )
SC_t6_Tol_syto9 = c(syto2$ToluSC1[syto2$time == 43],syto2$ToluSC2[syto2$time == 43],syto2$ToluSC3[syto2$time == 43] )
SC_t6_Tol_mChe = c(c(cher$ToluSC1[cher$time == 43],cher$ToluSC2[cher$time == 43],cher$ToluSC3[cher$time == 43]))
PP_t6_Tol_mChe = c(cher$ToluPP1[cher$time == 43],cher$ToluPP2[cher$time == 43],cher$ToluPP3[cher$time == 43])
PP_T6_Tol_syto9 = c(syto2$ToluPP1[syto2$time == 43],syto2$ToluPP2[syto2$time == 43],syto2$ToluPP3[syto2$time == 43])
PPSC_T6_Tol_syto9 = c(syto2$ToluPPSC1[syto2$time == 43],syto2$ToluPPSC2[syto2$time == 43],syto2$ToluPPSC3[syto2$time == 43])
PPSC_T6_Tol_mChe = c(cher$ToluPPSC1[cher$time == 43],cher$ToluPPSC2[cher$time == 43],cher$ToluPPSC3[cher$time == 43])
t.test(PPSC_T6_Tol_syto9,SC_t6_Tol_syto9, var.equal = T)
power.t.test(n = 3, delta = mean(PPSC_T6_Tol_syto9) - mean(SC_t6_Tol_syto9), sd = sd(c(SC_t6_Tol_syto9, PPSC_T6_Tol_syto9)))
mean(PPSC_T6_Tol_syto9)
mean(PP_T6_Tol_syto9)
mean(PPSC_T6_Tol_mChe)
mean(PP_T6_Tol_syto9)
var(SC_t6_mixC_syto9)
var(PP_t6_Tol_mChe)
var(PP_t6_mixC_mChe)
var(SC_t6_Tol_syto9)
#graphiques
par(mfrow = c(1,1))
totsc <- data.frame(time, MixC_SCmoy, Tol_SCmoy, MixC_PPSC_SCmoy, Tol_PPSC_SCmoy)
Tol_deadPPmoy<- c()
#ppmortes dans ppseul
for(i in 1:8){
Tol_deadPPmoy[i] <- sum(syto2$ToluPP1[time==time[i]],  syto2$ToluPP2[time==time[i]],syto2$ToluPP3[time==time[i]])/3
}
#total dans ppseul
Tol_all_in_pp = c()
for(i in 1:8){
Tol_all_in_pp[i]  <- Tol_deadPPmoy[i] + Tol_PPmoy[i]
}
#Plot des comptes de SC
plot(totsc$time, totsc$MixC_SCmoy,log="y",xlim=c(0,48),ylim=c(min(Tol_deadPPmoy), max(cell_count$Tol_PPSCmoy)), type="o",main="SC growth",xlab= "Time [Hours]", ylab="log(SC count)")
points(totsc$time,totsc$Tol_SCmoy, type="o", col="red")
points(totsc$time,totsc$MixC_PPSC_SCmoy, type="o", col="blue")
points(totsc$time,totsc$Tol_PPSC_SCmoy, type="o", col="orange")
points(totsc$time, Tol_deadPPmoy, type="o", col="green")
points(totpp$time, cell_count$MixC_PPSCmoy, type="o", col="brown")
points(totpp$time, cell_count$Tol_PPSCmoy, type="o", col="gray")
points(totpp$time, Tol_all_in_pp, type = "o", col = "pink")
legend("bottomright",legend = c( "Syt9 cnt in Tol PPalone", "PPSC total in mixC", "PPSC total in Tol", "total count in pp alone"),fill=c("green", "brown", "gray", "pink"))
legend("bottom", legend=c("SC in mixC","SC in Tol","SC in PPSC in mixC","SC in PPSC in Tol"),fill=c("black","red","blue","orange"))
#SAME WITH PP
totpp <- data.frame(time, MixC_PPmoy, Tol_PPmoy, MixC_PPSC_PPmoy, Tol_PPSC_PPmoy)
plot(totpp$time, totpp$MixC_PPmoy,log="y",xlim=c(0,48),ylim=c(min(Tol_deadPPmoy), max(cell_count$Tol_PPSCmoy)), type="o",main="PP growth",xlab= "Time [Hours]", ylab="log(PP count)")
#Plot des comptes de PP
points(totpp$time,totpp$Tol_PPmoy, type="o", col="red")
points(totpp$time,totpp$MixC_PPSC_PPmoy, type="o", col="blue")
points(totpp$time,totpp$Tol_PPSC_PPmoy, type="o", col="orange")
points(totpp$time, cell_count$MixC_PPSCmoy, type="o", col="brown")
points(totpp$time, cell_count$Tol_PPSCmoy, type="o", col="gray")
legend("bottomright",legend=c("PP in mixC","PP in Tol","PP in PP+SC in mixC","PP in PP+SC in Tol", "PPSC total in mixC", "PPSC total in Tol"),fill=c("black","red","blue","orange", "brown", "gray"))
#estimer l'erreur des réplicats technique
#mentionner les problèmes avec le 3èmes réplicats techniques
#erreur type du flow cytometer ?
#paramètres importants, pls colonnes : SCw1 or w2, Replicat, PV, PP, SC, AIre sous la courbe
#il aurait fallu faire mixC+tol
#cmb de ug de carbon dans le tol et dans le mixC?
#---------------AREA under a CURVE --> WESH CA MARCHE
#---- INSTALL.PACKAGES("PRACMA")
##GENERAL LINAR MODEL TABLE
replicat <- rep(c("1", "2", "3"),20)
SCweek <- rep(c("1", "2"), each=30)
PV <- c(rep(c("N"), 30),rep(c("N"), 3), rep(c("Y"), 12),rep(c("N"), 3), rep(c("Y"), 12))
PP <- c(rep(c("N"), 3), rep(c("Y"), 12),rep(c("N"), 3), rep(c("Y"), 12), rep(c("N"), 30))
SC <- rep(c(rep(c("Y","N"), each=3),rep(c("Y"), time=9)),time=4)
AUC <- vector(length = 60)
names1 <- c()
CvTol = rep(c("MixC", "Tol"), each = 15, time=2)
bac = c(rep(rep(c("SC", "PP", "PPSC_SC","PPSC_PP", "PPSC_tot"), each = 3), time = 2),rep(rep(c("SC", "PV", "PVSC_SC","PVSC_PP", "PVSC_tot"), each = 3), time = 2))
n = c(rep(c(1,2,3), times = 10), rep(c("1_1","2_1","3_1"), times=10))
for(i in 1:60){
names1[i] = paste(CvTol[i], paste(bac[i], n[i], sep = ""), sep = "_")
}
week <- data.frame(names1,SCweek,replicat,PV, PP,SC,AUC)
## Table avec les mêmes noms dans le même ordre que week
ess <- read.table("ess.txt", sep="\t", header=T)
ess2 <- read.table("ess2.txt", header = T)
## Aire sous la courbe
for(i in 1:30){
week$AUC[i] = trapz(time,ess[,i])
}
for(i in 31:60){
week$AUC[i] = trapz(time_w2, ess2[,1])
}
time_w2 = c(0, 14.5, 18, 21, 23.5, 36.5, 42 ,44.5 , 47.5 )
for(i in 31:60){
week$AUC[i] = trapz(time_w2, ess2[,1])
}
View(week)
